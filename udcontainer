#!/usr/bin/bash
################################################################################
#                              udcontainer                                     #
#                         Upper & Downer Container                             #
#                                                                              #
#                                                                              #
# Script made with the intention of studing a bit of bash script programming.  #
#                                                                              #
# The objective for this script is making easier for me to start my docker     #
# containers.                                                                  #
#                                                                              #
# Change History                                                               #
# 11/11/2019  Arthur Hassan    Creation of this scirpt.                        #
#                                                                              #
################################################################################
################################################################################
################################################################################
#                                                                              #
#  Copyright (C) 2021 Arthur Hassan                                            #
#                                                                              #
#  This program is free software; you can redistribute it and/or modify        #
#  it under the terms of the GNU General Public License as published by        #
#  the Free Software Foundation; either version 2 of the License, or           #
#  (at your option) any later version.                                         #
#                                                                              #
#  This program is distributed in the hope that it will be useful,             #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of              #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
#  GNU General Public License for more details.                                #
#                                                                              #
#  You should have received a copy of the GNU General Public License           #
#  along with this program; if not, write to the Free Software                 #
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA   #
#                                                                              #
################################################################################
################################################################################
################################################################################

################################################################################
# Help                                                                         #
################################################################################
function help()
{
   # Display Help
   echo "Script made for starting/stoping the docker containers for you"
   echo 
   echo "To run more then one container you have to put the containers"
   echo "wrapped in quotation marks and separated with a blank space."
   echo "If you want to run only one container you dont need to put the"
   echo "quotations marks."
   echo 
   echo "Example without: udcontainer -n mongo-test"
   echo "Example with:    udcontainer -n \"postgres-dev mysql-prod mongo-test\""
   echo 
   echo "Keep in mind, if you want to use the -e option you have to make sure"
   echo "your containers names follows this pattern: [\"name\"-\"environment\"]"
   echo "\"name\" represents the container name, and \"environment\""
   echo "the values [local/dev/test/prod] or whatever type of pattern you have."
   echo "Name examples: postgres-dev | mysql-prod | mongo-test"
   echo 
   echo "Use example 1: udcontainer -n mongo -e test"
   echo "Use example 2: udcontainer -n \"mongo postgres mysql\" -e test"
   echo
   echo "Syntax: udcontainer -[s|h|n|e|l|r]"
   echo "options:"
   echo "   -s     Boolean value for start or stop the database"
   echo "   -h     Print this Help."
   echo "   -n     The names of the containers you are trying to run"
   echo "   -e     The environment of the container."
   echo "   -l     List of containers you can start"
   echo "   -r     List of running containers"
   echo
}
################################################################################
################################################################################

################################################################################
# Functions                                                                    #
################################################################################
function check_dependencies()
{
    echo -n "Checking dependencies before running the command... "
    for name in docker
    do
    [[ $(which $name 2>/dev/null) ]] || { echo -en "\n$name needs to be installed. ";deps=1; }
    done
    [[ $deps -ne 1 ]] && echo "OK" || { echo -en "\nInstall the above and rerun this script\n";exit 1; }
}

function load_list_of_containers()
{
    containers_list=$(docker container ls -a --format 'table {{.Names}}');
}

function list_containers()
{
    echo 
    command docker container ls -a --format 'table {{.Names}}\t{{.Image}}'
    echo 
}

function list_running_containers()
{
    echo 
    command docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.State}}-{{.Status}}\t{{.CreatedAt}}'
    echo 
}

function validate_container_name()
{
    read -ra names -d ' ' <<<"$containers_list"
    for name in "${names[@]}"
    do
        if [ "${name}" == "${1}" ]; 
        then
            is_valid="true"
            break
        else
            is_valid="false"
        fi
    done

    echo "$is_valid"
    unset $is_valid
}

function check_container_status()
{
    local is_running=$( docker container inspect -f '{{.State.Status}}' $1 )

    if [[ "$is_running" == "running" ]]; 
    then
        echo "stop"
    else
        echo "start"
    fi
}
################################################################################
################################################################################


################################################################################
# Main program                                                                 #
################################################################################

while getopts "s:n:e:rlh" option; do
    case "$option" in
        h)
            help
            exit;;
        l) 
            list_containers
            exit;;
        r) 
            list_running_containers
            exit;;
        s) 
            start=${OPTARG};; 
        n) 
            containers_names=${OPTARG};; 
        e) 
            environment=${OPTARG};; 
        \?)
            echo "Error: Invalid option"
            exit;;
    esac
done

check_dependencies

null_environment=$( [ -z ${environment} ] && echo "True" || echo "False" )
null_start=$( [ -z ${start} ] && echo "True" || echo "False" )
load_list_of_containers
containers_array=($containers_names)
number_of_containers=${#containers_array[@]}

if [[ "${number_of_containers}" == "0" ]];
then
    echo
    echo "No container was specified!"
    list_containers
    echo "Specify at least one of the containers on the list and rerun the command."
    exit
fi

if [ "$null_environment" == "False" ]; 
then
    echo ${containers_array[@]}
    for container in "${containers_array[@]}"; do
        i=$((i+1))
        echo $container-$environment 
        environment_container+="$container-$environment "
    done
    unset containers_array
    containers_array=$environment_container
fi

for container in "${containers_array[@]}"; do
    if [ "$( validate_container_name ${container} )" == "false" ]; 
    then
        echo
        echo "-IGNORING ARGUMENT-"
        echo "Not a valid container name: ${container}"
        echo
    else 
        valid_containers+=($container)
    fi
done


if [ "$null_start" == "True" ];
then
    for container in "${valid_containers[@]}"; do
       start_container+=( "$(check_container_status ${container}) ")
    done
else
    for container in "${valid_containers[@]}"; do
       start_container+=("${start} ")
    done
fi

i=0;
for container in "${valid_containers[@]}"; do
    echo "Running command: docker ${start_container[$i]} ${container}"
    command docker ${start_container[$i]} ${container}
    i=$((i+1))
done